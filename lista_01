{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aluizakarl/introPython/blob/main/lista_01\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1a972f5b",
      "metadata": {
        "id": "1a972f5b"
      },
      "source": [
        "# Exercícios de Bioinformática em Python"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6cce6097",
      "metadata": {
        "id": "6cce6097"
      },
      "source": [
        "## Tipos de Dados"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3a1383ff",
      "metadata": {
        "id": "3a1383ff"
      },
      "source": [
        "### 1. Manipulação de Sequências de DNA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6cd132a3",
      "metadata": {
        "id": "6cd132a3"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 1\n",
        "# Dada a sequência de DNA abaixo, extraia o gene (substring) e converta-o para maiúsculas.\n",
        "\n",
        "sequencia_dna = \"atgcttagctagcttgatcgatcgtagctgac\"\n",
        "# Seu código aqui\n",
        "gene = sequencia_dna[3:15].upper()\n",
        "print(gene)  # Deve imprimir 'CTTAGCTAGCTA'\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ee200b46",
      "metadata": {
        "id": "ee200b46"
      },
      "source": [
        "### 2. Operações com Listas de Genes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ad6a7ecf",
      "metadata": {
        "id": "ad6a7ecf"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 2\n",
        "# Dada a lista de genes abaixo, adicione um novo gene ao final da lista e remova um gene específico.\n",
        "\n",
        "genes = [\"BRCA1\", \"TP53\", \"EGFR\", \"MYC\"]\n",
        "# Seu código aqui\n",
        "genes.append(\"BRAF\")\n",
        "genes.remove(\"EGFR\")\n",
        "print(genes)  # Deve imprimir ['BRCA1', 'TP53', 'MYC', 'BRAF']\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7edf2f43",
      "metadata": {
        "id": "7edf2f43"
      },
      "source": [
        "### 3. Uso de Dicionários para Informações de Genes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e971e27e",
      "metadata": {
        "id": "e971e27e"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 3\n",
        "# Crie um dicionário com informações sobre um gene: 'nome': 'BRCA1', 'localização': '17q21.31', 'função': 'Reparo de DNA'.\n",
        "# Em seguida, atualize a função para 'Supressor de tumor' e adicione um novo par chave-valor 'mutação_comum': '185delAG'.\n",
        "\n",
        "# Seu código aqui\n",
        "gene_info = {'nome': 'BRCA1', 'localização': '17q21.31', 'função': 'Reparo de DNA'}\n",
        "gene_info['função'] = 'Supressor de tumor'\n",
        "gene_info['mutação_comum'] = '185delAG'\n",
        "print(gene_info)\n",
        "# Deve imprimir {'nome': 'BRCA1', 'localização': '17q21.31', 'função': 'Supressor de tumor', 'mutação_comum': '185delAG'}\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eae7b8fb",
      "metadata": {
        "id": "eae7b8fb"
      },
      "source": [
        "## Condicionais"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a42b020e",
      "metadata": {
        "id": "a42b020e"
      },
      "source": [
        "### 4. Estruturas if-else para Verificação de Bases de DNA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1eb1aca",
      "metadata": {
        "id": "c1eb1aca"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 4\n",
        "# Verifique se uma base de DNA é purina (A ou G) ou pirimidina (C ou T). Imprima uma mensagem correspondente para cada caso.\n",
        "\n",
        "base = 'G'\n",
        "# Seu código aqui\n",
        "if base in ['A', 'G']:\n",
        "    print(\"A base é uma purina.\")\n",
        "elif base in ['C', 'T']:\n",
        "    print(\"A base é uma pirimidina.\")\n",
        "else:\n",
        "    print(\"A base não é válida.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "30a39d73",
      "metadata": {
        "id": "30a39d73"
      },
      "source": [
        "### 5. Uso de Operadores Lógicos para Verificação de Motivos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "294b1fa9",
      "metadata": {
        "id": "294b1fa9"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 5\n",
        "# Verifique se uma sequência de DNA contém o motivo 'ATG'. Se contiver, imprima 'Motivo encontrado', caso contrário, imprima 'Motivo não encontrado'.\n",
        "\n",
        "sequencia = \"ccgatggcttacgt\"\n",
        "# Seu código aqui\n",
        "if 'ATG' in sequencia.upper():\n",
        "    print(\"Motivo encontrado.\")\n",
        "else:\n",
        "    print(\"Motivo não encontrado.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "76436eb1",
      "metadata": {
        "id": "76436eb1"
      },
      "source": [
        "## Repetições"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7ae2d3ac",
      "metadata": {
        "id": "7ae2d3ac"
      },
      "source": [
        "### 6. Laços for para Calcular o Conteúdo GC"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31444e9d",
      "metadata": {
        "id": "31444e9d"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 6\n",
        "# Calcule o conteúdo GC de uma sequência de DNA. Conte o número de Gs e Cs e divida pelo comprimento total da sequência.\n",
        "\n",
        "sequencia_dna = \"agctatcgatcggctagcgct\"\n",
        "# Seu código aqui\n",
        "gc_count = 0\n",
        "for base in sequencia_dna:\n",
        "    if base in ['G', 'C']:\n",
        "        gc_count += 1\n",
        "\n",
        "gc_content = (gc_count / len(sequencia_dna)) * 100\n",
        "print(f\"Conteúdo GC: {gc_content:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "73b93a0b",
      "metadata": {
        "id": "73b93a0b"
      },
      "source": [
        "### 7. Laços while para Encontrar Motivos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d085c74",
      "metadata": {
        "id": "0d085c74"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 7\n",
        "# Encontre todas as ocorrências do motivo 'ATG' em uma sequência de DNA e imprima suas posições.\n",
        "\n",
        "sequencia = \"atgcgatgatcgatgctagcatg\"\n",
        "motivo = \"ATG\"\n",
        "posicao = 0\n",
        "\n",
        "# Seu código aqui\n",
        "while posicao < len(sequencia):\n",
        "    posicao = sequencia.upper().find(motivo, posicao)\n",
        "    if posicao == -1:\n",
        "        break\n",
        "    print(f\"Motivo encontrado na posição {posicao}\")\n",
        "    posicao += 1\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a066cd92",
      "metadata": {
        "id": "a066cd92"
      },
      "source": [
        "### 8. Uso da função range() para Simular Leituras de Sequenciamento"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aa1ec8b2",
      "metadata": {
        "id": "aa1ec8b2"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Exercício 8\n",
        "# Simule leituras de sequenciamento (reads) de uma sequência maior. Gere sub-sequências de comprimento 5 a partir da sequência fornecida.\n",
        "\n",
        "sequencia_maior = \"atgctagctagctagctgactgca\"\n",
        "tamanho_read = 5\n",
        "reads = []\n",
        "\n",
        "# Seu código aqui\n",
        "for i in range(0, len(sequencia_maior) - tamanho_read + 1):\n",
        "    reads.append(sequencia_maior[i:i + tamanho_read])\n",
        "\n",
        "print(reads)\n",
        "# Deve imprimir ['atgct', 'tgcta', 'gctag', 'ctagc', ...]\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}